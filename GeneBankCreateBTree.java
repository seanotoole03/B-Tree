import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;

/**
 * 
 * @author seanotoole
 *
 */
public class GeneBankCreateBTree {
	
	private BTree<TreeObject> tree;
	private static SequenceReader fileSequenceReader;
	private static File inFile, outFile;
	private static RandomAccessFile fileRead;
	private static boolean cacheBool = false;
	private static String usage() {
		String ret = "Usage:\tGeneBankCreateTree <cache use (0/1)> <int degree> <String .gbk filename> " +
				"<int sequence length> [<int cache size>] [<int debug level>]";
		return ret;
	}
	
	/**
	 * Generates the correct output filename for the given input filename.
	 * @param fileName
	 * @param degree
	 * @param sequenceLength
	 * @return new filename in format xyz.gbk.btree.data.k.t
	 */
	private static String fileNameGenerate(String fileName, int degree, int sequenceLength) {
		String name = "";
		name += fileName;
		name += ".btree";
		name += ("." + sequenceLength);
		name += ("." + degree);
		return name;
	}
	/**
	 * Main constructor and operation for class - creates BTree, binary file, and dump file if needed
	 * @param cache
	 * @param degree
	 * @param fileName
	 * @param sequenceLength
	 * @param cacheSize
	 * @param debug
	 */
	public GeneBankCreateBTree(int cache, int degree, String fileName, String newFileName, int sequenceLength, int cacheSize, int debug) {
		//TODO - review 
		
		tree = new BTree<TreeObject>(degree, newFileName, cache, cacheSize);
		//get input file, and create sequence reader
		try 
		{
			//read input file
			fileSequenceReader = new SequenceReader(fileName, sequenceLength);
			fileSequenceReader.sequenceReader(fileRead);
			//output file should be generated by the insert process
			
		} catch (FileNotFoundException e) {
			System.out.println("File not found.");
			System.exit(0);
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("IO Error.");
			System.exit(0);
		}
		
		//get array of subsequences, feed into tree
		ArrayList<Long> sequences = fileSequenceReader.getSubsequences();
		while(!sequences.isEmpty()) { //empty array by inserting into tree
			tree.insert(sequences.remove(0)); 
		}
		
		//debug check - 0: all messages and errors to stdout; 1: create dump file
		if(debug == 1) { //dump file should be created
			outFile = new File("dump");
			try {
				outFile.delete();
				outFile.createNewFile(); //returns a boolean, but we don't care about its value
//				if(!outFile.createNewFile()) {
//					System.out.println("File creation error!");
//				};
			} catch (IOException e) {
				e.printStackTrace();
			}
			//TODO: traverse tree in in-order traversal to print out all values to dump file
			
			tree.treeTraverseDump(outFile, sequenceLength); //print all sequences to output file
		}
	}
	
	
	/**
	 * Return the optimal degree for this BTree and disk block size of 4096
	 * @return
	 */
	public static int optimalDegree() { //TODO: test this
		return ( ((4096 - 16) + 12) / (32) );
	}

	public static void main(String[] args) { //should parse all 4-6 arguments, run CreateTree method as appropriate
		
		if(args.length >= 7) {
			System.out.println(usage());
			System.exit(0);
		}
		
		//parse, handle values
		int cache = Integer.parseInt(args[0]);
		if( cache != 0 && cache != 1) {
			System.out.println(usage());
			System.out.println("Invalid cache usage value - 0 or 1 only. 0 indicates no cache, 1 indicates use cache.");
			System.exit(0);
		} else if(cache == 0) {
			cacheBool = false;
		} else { //cache == 1
			cacheBool = true;
		}
		
		int degree = Integer.parseInt(args[1]);
		if( degree == 0 ) {
			degree = optimalDegree();
		} else if(degree < 2) {
			System.out.println(usage());
			System.out.println("Invalid degree value - must be 0 or integer of 2 or greater. 0 selects optimal degree for a disk block size of 4096 bytes.");
			System.exit(0);
		}
		
		String fileName = args[2];
		if(!fileName.endsWith(".gbk") || fileName.isEmpty()) {
			System.out.println("Invalid filename - only .gbk files are valid parameters for this program.");
			System.exit(0);
		}
		try {
			//open read stream for input file
			 inFile = new File(fileName);
			 fileRead = new RandomAccessFile(inFile, "rw");
			 
		} catch (FileNotFoundException e) {
			System.out.println(usage());
			System.out.println("File error - invalid filename, should be a .gbk file in a local directory.");
			System.exit(0);
		}
		
		
		int sequenceLength = Integer.parseInt(args[3]);
		if(sequenceLength < 2 || sequenceLength > 31) {
			System.out.println(usage());
			System.out.println("Sequence length should be longer than 1 and smaller than 32");
			System.exit(0);
		}
		
		//optional args
		int cacheSize = 0;
		int debug = 0; //default value
		if(cacheBool) {
			cacheSize = Integer.parseInt(args[4]);
			if(args.length == 6)
				debug = Integer.parseInt(args[5]);
			if(debug != 0 && debug != 1) {
				System.out.println(usage());
				System.out.println("Valid debug levels include only 0 and 1");
				System.exit(0);
			}
		} else {
			if(args.length == 5) //debug level chosen
				debug = Integer.parseInt(args[4]); 
			if(debug != 0 && debug != 1) {
				System.out.println(usage());
				System.out.println("Valid debug levels include only 0 and 1");
				System.exit(0);
			}
		}
		
		
		
		String newFileName = fileNameGenerate(fileName, degree, sequenceLength);
		GeneBankCreateBTree btree = new GeneBankCreateBTree(cache, degree, fileName, newFileName, sequenceLength, cacheSize, debug);
		btree.tree.finalizeBTree();
	}

}
